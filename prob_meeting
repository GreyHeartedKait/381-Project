#Probability of meeting someone at the party
# I assume the probability of meeting someone at a party is proportional to the sum of all edge weights a person has
def prob_meeting(graph, person):
    total_weights=np.sum(graph) 
    person_weights = np.sum(graph[person])
    
    return person_weights/total_weights
#Dijkstra for the best connection
def dijkstra(graph, start,end):
    n=len(graph)
    distances = {node:float('inf') for node in range(n)}
    distances[start]=0
    priority_q = [(0, start)]
    
    while priority_q:
        current_distance, current_node = pq.heappop(priority_q)
        if current_node == end:
            return current_distance #shortest distance = best connection
        for neighbor, weight in enumerate(graph[current_node]):
            if weight>0:
                new_distance= current_distance+1/weight
                if new_distance<distances[neighbor]:
                    distances[neighbor] = new_distance
                    pq.heappush(priority_q,(new_distance, neighbor))
    return float('inf')#if there is no path/ no connection
main = 0
true_love = np.random.randint(1, len(graph))
path_length = dijkstra(graph, main, true_love)
print(f"Shortest path length: {path_length}")
# As we meet more people, the connection gets stronger and hence the weight increases by a factor j
def update_weight(graph, a, b, j=0.1):
    if graph[a,b] > 0:
        graph[a,b] += j*(1-graph[a,b])
        graph[b,a]=graph[a,b] # This will keep the symmetry of the edge
